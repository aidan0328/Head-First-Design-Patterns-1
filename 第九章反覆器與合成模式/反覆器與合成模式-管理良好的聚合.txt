1.檢視問題(兩個不同物件如何合併)
2.封裝重複動作-使用反覆器
3.認識反覆器模式
4.定義反覆器模式：「讓我們能夠取得一個聚集內的每一個元素，而不需要此聚合將其實踐方式暴露。」
5.單一責任：「如果允許我們的聚集實踐他們內部的聚合，以及相關的操作和反覆的方法，又會如何?我們已經知道這會增加聚集的方法個數，但又怎樣?為什麼這麼做不好?」
6.設計守則：「一個類別應該只具有一個改變的理由」
7.類別的每個責任都有改變的淺在部分。超過一個責任就代表超過一個改變的淺在部分。這個守則告訴我們盡量讓每一個類別保持單一責任。
8.反覆器與聚合
9.定義合成模式：「允許你將物件合成樹狀結構，呈現「部分/整體」的階層關係。合成能讓客戶程式碼以一致的方式處理個別物件，以及合成的物件。」
10.合成模式讓我們能夠用樹狀方式建立物件的結構，樹裡面包含了合成以及個別的物件。
11.使用合成結構，我們能以相同的操作處理合成以及個別的物件。換句話說，在大多數情況下，我們可以忽略合成以及個別物件之間的差異。
12.透明性：讓元件的介面同時包含一些管理子節點的操作以及葉節點的操作，如此一來客戶就可以將合成節點和葉節點一視同仁，也就是說一個元素究竟是合成節點或者業節點，客戶看不到。