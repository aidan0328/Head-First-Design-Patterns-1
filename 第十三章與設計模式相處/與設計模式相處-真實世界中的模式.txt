1.模式是在某情境(Context)下，針對某個問題的某種解決方案。

2.模式的描述就是由一個問題、一個情境、一個解決方案所構成。
A.情境就是採取某個模式的狀態，這應該是一個不斷出現的狀況。
B.問題就是你想在某情境下達到的目標，也可以是某情境下的限制。
C.解決方案就是你所追求的:一個一般性的設計，用來解決限制、達到目標。

3.根據模式的目標分成三類：生成、行為、以及結構
A.生成模式：牽涉到將物件實體化，這類模式都提供一個方法，將客戶從所需要實體化的物件中鬆綁出來。
B.行為模式：他的重點都在於類別和物件如何互動，以及各自的責任。
C.結構模式：有一些模式(用在比較不常使用的技巧)尚未在本書中介紹，這些模式將在第十四章介紹。

4.另外一種模式分類：類別模式與物件模式
A.類別模式：會描述類別之間的關係如何透過繼承定義。類別模式的關係是在編譯時期就建立好的，
B.物件模式：定義物件之間的關係，而且物件模式主要是利用合成定義。物件模式的關係正常是在執行時期建立的，而且更動態、更有彈性。

5.重要警告：過度使用設計模式可能導致程式碼過度工程化。經常用最簡單的解決方案完成工作，並在真正需要模式的地方才使用。

6.共通語彙的五種方式：
A：在設計會議中－當你和你的團隊在會議中討論軟體設計時，使用設計模式可以幫助你們待在「設計中」久一點。從設計模式以及物件導向守則的觀點，討論設計可以避免你的團隊很快地陷入實踐的細節，也可以避免發生許多誤解。
B：和其他開發者－當你和其他開發者討論的時候，可以使用模式。這可以幫妳其他開發者學習新模式，並建立一個社群。和別人分享你所學會的東西是很有成就感的事情。
C：在架構文件的時候－當你在寫架構文件的時候，使用模式將會縮減文件的篇幅，一定讓讀者更清楚地瞭解你的設計，
D：在程式碼註解以及命名慣例上－當你在寫程式碼的時候，在註解中清楚地著名你所用的模式，還有選擇類別和方法的名稱，盡可能地皆露出對應的模式。其他開發者在閱讀你的程式碼時會很感激你，它們也能夠很快地了解你的程式碼內容。
E：將志同道合的開發者聚合再一起－分享你得知識。許多開發者都聽過模式，但並不真正了解甚麼是模式。你可以自願為它們講一堂模式介紹，或者成立讀書會。

7.反模式：告訴你如何採用一個不好的解決方案解決一個問題。
8.反模式的組成單元：
A：反模式告訴我們為什麼不好的解決方案會有吸引力。
B：反模式告訴你為何這個解決方案長遠以後會造成不好的影響。
C：反模式建議擬改用其他的模式，提供更好的解決方案。

9.反模式看起來總像是一個好的解決方案，但是當他被真正採用後就會帶來麻煩。藉由將反模式寫成文件，我們能夠幫助其他人辨識出不好的解決方案，以免被誤用。就如同模式一般，有許多不同種類的反模式，包含開發反模式、物件導向反模式、組織反模式、以及各種領域特定的反模式。
