1.簡介代理人模式
2.遠端代理人是「遠端物件的本地代表」。
3.何謂「遠端物件」?這是一種物件，活在不同的 JVM 記憶體堆積區(heap)中
4.何謂「本地代表」?這是一個可以在本地端調用的物件，其行為會被轉到遠端物件中施行。
5.你的客戶物件運作起來就像是呼叫遠端，但其實只是呼叫本地堆積區中的「代理人」物件，再由代理人處理網路溝通的低階細節。
6.使用和介紹 Java 套件 RMI
7.代理人執行運作的流程
8.RMI 術語： RMI 將客戶輔助物件稱為 Stub，服務輔助物件稱為 Skeletion。
9.製作遠端服務：
步驟一：製作遠端介面
步驟二：製作遠端實踐
步驟三：利用 RMIC 產生真正的 Stub 和 Skeleton
步驟四：開始 RMI Registry(rmiregistry)
步驟五：開始遠端服務
10.使用 RMI 常見錯誤：
錯誤一：忘記啟動遠端服務之前先啟動 Rmiregistry。(想要用 Naming.rebind()，就必須先啟動 Rmiregistry。)
錯誤二：忘記讓參數和傳出值得型態成為可序列化的型態。(該錯誤無法在編譯期間發現，只會在執行期發現)
錯誤三：忘記提供 Stub 類別給 Client 端使用
11.藉由調用代理人的方法，遠端方法的調用可以跨過網路，傳回字串、整數和狀態物件。
因為我們使用的是代理人，調用方法會在遠端執行，本低端根本就不知道或者不在乎這一點(唯一例外就是：要處理遠端例外)
12.定義代理人模式：讓某個物件具有一個替身，藉以控制外界對此物件的接觸。
13.使用代理人模式建立代表物件，讓代表物件控制某物件的存取，被代理的物件可以是遠端的物件，建立成本高的物件或者需要安全控管的物件。
14.簡介虛擬代理人
15.簡述保護代理人
16.動態代理人：
步驟一：建立兩個 InvocationHandler
步驟二：寫程式碼建立動態代理人
步驟三：利用適當的代理人包裝任何 PersonBean 物件
